
<div style="margin-bottom: 20px;">
    <a href="/" class="btn btn-primary">
        <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
</div>

<div class="card">
    <h2>
        <i class="fas fa-video"></i> Stream: <%= streamId %>
        <span class="status status-<%= status %>" data-stream-id="<%= streamId %>" style="margin-left: 15px;">
            <%= status %>
        </span>
    </h2>
</div>

<div class="grid">
    <div class="card">
        <h3><i class="fas fa-upload"></i> Upload Media Files</h3>
        <form action="/upload/<%= streamId %>" method="POST" enctype="multipart/form-data">
            <div class="upload-area">
                <i class="fas fa-cloud-upload-alt" style="font-size: 48px; color: #bdc3c7; margin-bottom: 15px;"></i>
                <div>
                    <input type="file" name="files" multiple accept="video/*,audio/*" 
                           style="display: none;" id="fileInput">
                    <label for="fileInput" class="btn btn-primary" style="cursor: pointer;">
                        <i class="fas fa-folder-open"></i> Choose Files
                    </label>
                </div>
                <p style="margin-top: 10px; color: #7f8c8d;">
                    Supported formats: MP4, MP3, WAV, AVI, MOV, WMV, FLV, WebM, M4A, AAC
                </p>
            </div>
            <button type="submit" class="btn btn-success" style="margin-top: 15px;">
                <i class="fas fa-upload"></i> Upload Files
            </button>
        </form>
    </div>

    <div class="card">
        <h3><i class="fas fa-cogs"></i> Stream Controls</h3>
        <form id="streamForm">
            <div class="form-group">
                <label for="rtmpUrl">RTMP Server URL</label>
                <input type="text" id="rtmpUrl" name="rtmpUrl" class="form-control" 
                       placeholder="rtmp://a.rtmp.youtube.com/live2" 
                       value="rtmp://a.rtmp.youtube.com/live2">
            </div>
            <div class="form-group">
                <label for="streamKey">Stream Key</label>
                <input type="text" id="streamKey" name="streamKey" class="form-control" 
                       placeholder="Your YouTube stream key" required>
            </div>
            
            <div class="controls">
                <button type="button" class="btn btn-success" onclick="startStream()">
                    <i class="fas fa-play"></i> Start Stream
                </button>
                <button type="button" class="btn btn-warning" onclick="restartStream()">
                    <i class="fas fa-redo"></i> Restart Stream
                </button>
                <button type="button" class="btn btn-danger" onclick="stopStream()">
                    <i class="fas fa-stop"></i> Stop Stream
                </button>
            </div>
        </form>
    </div>
</div>

<% if (files && files.length > 0) { %>
<div class="card">
    <h3><i class="fas fa-list"></i> Media Files (<%= files.length %>)</h3>
    <% files.forEach((file, index) => { %>
    <div class="file-item">
        <div class="file-info">
            <i class="fas fa-<%= file.name.match(/\.(mp4|avi|mov|wmv|flv|webm)$/i) ? 'video' : 'music' %>"></i>
            <div>
                <div style="font-weight: 600;"><%= file.name %></div>
                <div style="font-size: 12px; color: #7f8c8d;">
                    <span class="file-size" data-size="<%= file.size %>"></span>
                </div>
            </div>
        </div>
        <button class="btn btn-danger" onclick="deleteFile('<%= file.name %>')" style="padding: 6px 12px;">
            <i class="fas fa-trash"></i>
        </button>
    </div>
    <% }) %>
</div>
<% } else { %>
<div class="card" style="text-align: center; padding: 40px;">
    <i class="fas fa-file-video" style="font-size: 48px; color: #bdc3c7; margin-bottom: 15px;"></i>
    <h4 style="color: #7f8c8d;">No media files uploaded</h4>
    <p style="color: #95a5a6;">Upload video or audio files to start streaming</p>
</div>
<% } %>

<script>
    async function startStream() {
        const rtmpUrl = document.getElementById('rtmpUrl').value;
        const streamKey = document.getElementById('streamKey').value;
        
        if (!rtmpUrl || !streamKey) {
            showAlert('Please fill in both RTMP URL and Stream Key', 'error');
            return;
        }

        try {
            const response = await fetch(`/start-stream/<%= streamId %>`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rtmpUrl, streamKey })
            });

            const result = await response.json();
            showAlert(result.message, result.success ? 'success' : 'error');
        } catch (error) {
            showAlert('Error starting stream: ' + error.message, 'error');
        }
    }

    async function stopStream() {
        try {
            const response = await fetch(`/stop-stream/<%= streamId %>`, {
                method: 'POST'
            });

            const result = await response.json();
            showAlert(result.message, result.success ? 'success' : 'error');
        } catch (error) {
            showAlert('Error stopping stream: ' + error.message, 'error');
        }
    }

    async function restartStream() {
        const rtmpUrl = document.getElementById('rtmpUrl').value;
        const streamKey = document.getElementById('streamKey').value;
        
        if (!rtmpUrl || !streamKey) {
            showAlert('Please fill in both RTMP URL and Stream Key', 'error');
            return;
        }

        try {
            const response = await fetch(`/restart-stream/<%= streamId %>`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ rtmpUrl, streamKey })
            });

            const result = await response.json();
            showAlert(result.message, result.success ? 'success' : 'error');
        } catch (error) {
            showAlert('Error restarting stream: ' + error.message, 'error');
        }
    }

    async function deleteFile(filename) {
        if (!confirm('Are you sure you want to delete this file?')) {
            return;
        }

        try {
            const response = await fetch(`/delete-file/<%= streamId %>/${encodeURIComponent(filename)}`, {
                method: 'DELETE'
            });

            const result = await response.json();
            showAlert(result.message, result.success ? 'success' : 'error');
            
            if (result.success) {
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        } catch (error) {
            showAlert('Error deleting file: ' + error.message, 'error');
        }
    }

    // File input change handler
    document.getElementById('fileInput').addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            const fileList = files.map(f => f.name).join(', ');
            showAlert(`Selected ${files.length} file(s): ${fileList}`, 'success');
        }
    });

    // Show success/error messages from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('success')) {
        showAlert(urlParams.get('success'), 'success');
    }
    if (urlParams.get('error')) {
        showAlert(urlParams.get('error'), 'error');
    }
</script>

