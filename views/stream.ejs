<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stream: <%= streamId %> - Professional Live Streaming Server</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #8b5cf6;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --dark-bg: #0f172a;
            --dark-surface: #1e293b;
            --dark-surface-2: #334155;
            --light-text: #f8fafc;
            --muted-text: #94a3b8;
            --border-color: #334155;
            --gradient-1: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-2: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-3: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--dark-bg);
            color: var(--light-text);
            line-height: 1.6;
            min-height: 100vh;
            background-image: 
                radial-gradient(circle at 25% 25%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(139, 92, 246, 0.1) 0%, transparent 50%);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        .card {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border-color);
            border-radius: 1rem;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-lg);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-xl);
            border-color: rgba(99, 102, 241, 0.3);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--light-text);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: var(--gradient-1);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success-color), #059669);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--warning-color), #d97706);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--error-color), #dc2626);
            color: white;
        }

        .btn-ghost {
            background: transparent;
            color: var(--muted-text);
            border: 1px solid var(--border-color);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--light-text);
            font-size: 0.875rem;
        }

        .form-control {
            width: 100%;
            padding: 0.875rem 1rem;
            background: rgba(51, 65, 85, 0.5);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            color: var(--light-text);
            font-size: 0.875rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            background: rgba(51, 65, 85, 0.8);
        }

        .select-control {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }

        .grid {
            display: grid;
            gap: 1.5rem;
        }

        .grid-2 {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .grid-3 {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }

        .status {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .status-streaming {
            background: rgba(16, 185, 129, 0.2);
            color: var(--success-color);
            border: 1px solid rgba(16, 185, 129, 0.3);
            animation: pulse 2s infinite;
        }

        .status-stopped {
            background: rgba(148, 163, 184, 0.2);
            color: var(--muted-text);
            border: 1px solid rgba(148, 163, 184, 0.3);
        }

        .status-error {
            background: rgba(239, 68, 68, 0.2);
            color: var(--error-color);
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .status-created {
            background: rgba(99, 102, 241, 0.2);
            color: var(--primary-color);
            border: 1px solid rgba(99, 102, 241, 0.3);
        }

        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 1rem;
            padding: 3rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            background: rgba(51, 65, 85, 0.2);
        }

        .upload-area:hover {
            border-color: var(--primary-color);
            background: rgba(99, 102, 241, 0.1);
        }

        .upload-area.dragover {
            border-color: var(--success-color);
            background: rgba(16, 185, 129, 0.1);
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: rgba(51, 65, 85, 0.3);
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .file-item:hover {
            background: rgba(51, 65, 85, 0.5);
            transform: translateX(4px);
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .controls {
            display: flex;
            gap: 0.75rem;
            margin-top: 1.5rem;
            flex-wrap: wrap;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background: rgba(51, 65, 85, 0.3);
            padding: 1rem;
            border-radius: 0.5rem;
            text-align: center;
            border: 1px solid var(--border-color);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
        }

        .stat-label {
            font-size: 0.75rem;
            color: var(--muted-text);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .preset-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background: rgba(51, 65, 85, 0.3);
            color: var(--light-text);
            border-radius: 0.375rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }

        .preset-btn.active {
            background: var(--primary-color);
            border-color: var(--primary-color);
        }

        .preset-btn:hover {
            background: rgba(99, 102, 241, 0.2);
            border-color: var(--primary-color);
        }

        .alert {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            backdrop-filter: blur(10px);
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            color: var(--success-color);
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: var(--error-color);
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            .card {
                padding: 1.5rem;
            }
            .controls {
                flex-direction: column;
            }
            .btn {
                justify-content: center;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div style="margin-bottom: 2rem;">
            <a href="/" class="btn btn-ghost">
                <i class="fas fa-arrow-left"></i>
                Back to Dashboard
            </a>
        </div>

        <div class="card">
            <div class="card-header">
                <div>
                    <h2 class="card-title">
                        <i class="fas fa-video"></i>
                        Stream: demo-stream
                    </h2>
                    <p style="color: var(--muted-text); margin-top: 0.5rem;">
                        Configure your live streaming settings and manage your content
                    </p>
                </div>
                <span class="status status-stopped" data-stream-id="demo-stream">
                    stopped
                </span>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="fileCount">3</div>
                    <div class="stat-label">Media Files</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="totalSize">156 MB</div>
                    <div class="stat-label">Total Size</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="duration">--:--</div>
                    <div class="stat-label">Stream Duration</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="viewers">0</div>
                    <div class="stat-label">Viewers</div>
                </div>
            </div>
        </div>

        <div class="grid grid-2">
            <!-- Stream Configuration -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-sliders-h"></i>
                        Stream Configuration
                    </h3>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Stream Type</label>
                    <select id="streamType" class="form-control select-control" onchange="toggleStreamOptions()">
                        <option value="video">Video + Audio</option>
                        <option value="audio">Audio Only</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Quality Preset</label>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 0.5rem;">
                        <button class="preset-btn active" onclick="selectPreset(this, '720p')">720p HD</button>
                        <button class="preset-btn" onclick="selectPreset(this, '1080p')">1080p FHD</button>
                        <button class="preset-btn" onclick="selectPreset(this, '480p')">480p SD</button>
                        <button class="preset-btn" onclick="selectPreset(this, 'custom')">Custom</button>
                    </div>
                </div>

                <div id="customSettings" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">Resolution</label>
                        <select class="form-control select-control">
                            <option>1920x1080</option>
                            <option selected>1280x720</option>
                            <option>854x480</option>
                            <option>640x360</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Bitrate (kbps)</label>
                        <input type="number" class="form-control" value="2500" min="500" max="8000">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Frame Rate</label>
                        <select class="form-control select-control">
                            <option>24</option>
                            <option>30</option>
                            <option selected>60</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">RTMP Server URL</label>
                    <select id="rtmpPreset" class="form-control select-control" onchange="updateRtmpUrl()">
                        <option value="">Select Platform</option>
                        <option value="rtmp://a.rtmp.youtube.com/live2">YouTube Live</option>
                        <option value="rtmp://live.twitch.tv/live">Twitch</option>
                        <option value="rtmp://live-api-s.facebook.com:80/rtmp">Facebook Live</option>
                        <option value="custom">Custom RTMP URL</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">RTMP URL</label>
                    <input type="text" id="rtmpUrl" class="form-control" 
                           placeholder="rtmp://a.rtmp.youtube.com/live2" 
                           value="rtmp://a.rtmp.youtube.com/live2">
                </div>

                <div class="form-group">
                    <label class="form-label">Stream Key</label>
                    <div style="position: relative;">
                        <input type="password" id="streamKey" class="form-control" 
                               placeholder="Your stream key" style="padding-right: 3rem;">
                        <button type="button" onclick="toggleStreamKey()" 
                                style="position: absolute; right: 0.75rem; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--muted-text); cursor: pointer;">
                            <i class="fas fa-eye" id="streamKeyToggle"></i>
                        </button>
                    </div>
                </div>

                <div class="controls">
                    <button class="btn btn-success" onclick="startStream()">
                        <i class="fas fa-play"></i> Start Stream
                    </button>
                    <button class="btn btn-warning" onclick="restartStream()">
                        <i class="fas fa-redo"></i> Restart
                    </button>
                    <button class="btn btn-danger" onclick="stopStream()">
                        <i class="fas fa-stop"></i> Stop
                    </button>
                </div>
            </div>

            <!-- File Upload -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-upload"></i>
                        Upload Media Files
                    </h3>
                </div>
                
                <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                    <i class="fas fa-cloud-upload-alt" style="font-size: 3rem; color: var(--muted-text); margin-bottom: 1rem;"></i>
                    <div>
                        <input type="file" id="fileInput" multiple accept="video/*,audio/*" style="display: none;">
                        <div class="btn btn-primary" style="margin-bottom: 1rem;">
                            <i class="fas fa-folder-open"></i> Choose Files
                        </div>
                    </div>
                    <p style="color: var(--muted-text); font-size: 0.875rem;">
                        Or drag and drop files here<br>
                        <small>Supported: MP4, MP3, WAV, AVI, MOV, WMV, FLV, WebM, M4A, AAC</small>
                    </p>
                </div>

                <div id="uploadProgress" style="display: none; margin-top: 1rem;">
                    <div style="background: rgba(51, 65, 85, 0.5); border-radius: 0.5rem; overflow: hidden;">
                        <div id="progressBar" style="height: 0.5rem; background: var(--gradient-1); width: 0%; transition: width 0.3s ease;"></div>
                    </div>
                    <p style="text-align: center; margin-top: 0.5rem; font-size: 0.875rem; color: var(--muted-text);">
                        <span id="progressText">Uploading...</span>
                    </p>
                </div>
            </div>
        </div>

        <!-- Media Files List -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-list"></i>
                    Media Playlist
                </h3>
                <div style="display: flex; gap: 0.5rem;">
                    <button class="btn btn-ghost" onclick="sortFiles('name')">
                        <i class="fas fa-sort-alpha-down"></i> Sort
                    </button>
                    <button class="btn btn-ghost" onclick="shufflePlaylist()">
                        <i class="fas fa-random"></i> Shuffle
                    </button>
                </div>
            </div>
            
            <div id="filesList">
                <div class="file-item">
                    <div class="file-info">
                        <i class="fas fa-video" style="color: var(--primary-color);"></i>
                        <div>
                            <div style="font-weight: 600;">sample_video_1.mp4</div>
                            <div style="font-size: 0.75rem; color: var(--muted-text);">
                                52.3 MB • 1920x1080 • 02:35
                            </div>
                        </div>
                    </div>
                    <div style="display: flex; gap: 0.5rem; align-items: center;">
                        <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile(this, 'up')">
                            <i class="fas fa-arrow-up"></i>
                        </button>
                        <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile(this, 'down')">
                            <i class="fas fa-arrow-down"></i>
                        </button>
                        <button class="btn btn-danger" style="padding: 0.5rem;" onclick="deleteFile(this, 'sample_video_1.mp4')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>

                <div class="file-item">
                    <div class="file-info">
                        <i class="fas fa-music" style="color: var(--accent-color);"></i>
                        <div>
                            <div style="font-weight: 600;">background_music.mp3</div>
                            <div style="font-size: 0.75rem; color: var(--muted-text);">
                                8.7 MB • 320kbps • 03:42
                            </div>
                        </div>
                    </div>
                    <div style="display: flex; gap: 0.5rem; align-items: center;">
                        <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile(this, 'up')">
                            <i class="fas fa-arrow-up"></i>
                        </button>
                        <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile(this, 'down')">
                            <i class="fas fa-arrow-down"></i>
                        </button>
                        <button class="btn btn-danger" style="padding: 0.5rem;" onclick="deleteFile(this, 'background_music.mp3')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>

                <div class="file-item">
                    <div class="file-info">
                        <i class="fas fa-video" style="color: var(--primary-color);"></i>
                        <div>
                            <div style="font-weight: 600;">intro_sequence.mp4</div>
                            <div style="font-size: 0.75rem; color: var(--muted-text);">
                                95.2 MB • 1280x720 • 01:45
                            </div>
                        </div>
                    </div>
                    <div style="display: flex; gap: 0.5rem; align-items: center;">
                        <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile(this, 'up')">
                            <i class="fas fa-arrow-up"></i>
                        </button>
                        <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile(this, 'down')">
                            <i class="fas fa-arrow-down"></i>
                        </button>
                        <button class="btn btn-danger" style="padding: 0.5rem;" onclick="deleteFile(this, 'intro_sequence.mp4')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stream Analytics -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-chart-line"></i>
                    Stream Analytics
                </h3>
            </div>
            
            <div class="grid grid-3">
                <div class="stat-card">
                    <div class="stat-value" style="color: var(--success-color);">98.5%</div>
                    <div class="stat-label">Uptime</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" style="color: var(--warning-color);">2.4 Mbps</div>
                    <div class="stat-label">Avg Bitrate</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" style="color: var(--accent-color);">58 fps</div>
                    <div class="stat-label">Frame Rate</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">12ms</div>
                    <div class="stat-label">Latency</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">0</div>
                    <div class="stat-label">Dropped Frames</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">5.2 GB</div>
                    <div class="stat-label">Data Sent</div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <script>
        const socket = io();
        let currentStatus = 'stopped';

        // Socket event listeners
        socket.on('streamStatus', (data) => {
            updateStreamStatus(data.streamId, data.status, data.message);
        });

        socket.on('streamStats', (data) => {
            updateStreamStats(data);
        });

        function updateStreamStatus(streamId, status, message) {
            const statusElement = document.querySelector(`[data-stream-id="${streamId}"]`);
            if (statusElement) {
                statusElement.className = `status status-${status}`;
                statusElement.textContent = status;
                currentStatus = status;
            }

            if (message) {
                showAlert(message, status === 'error' ? 'error' : 'success');
            }
        }

        function updateStreamStats(data) {
            if (data.duration) {
                document.getElementById('duration').textContent = formatDuration(data.duration);
            }
            if (data.viewers !== undefined) {
                document.getElementById('viewers').textContent = data.viewers;
            }
        }

        function formatDuration(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        function toggleStreamOptions() {
            const streamType = document.getElementById('streamType').value;
            // Add logic to show/hide video-specific options
        }

        function selectPreset(button, preset) {
            // Remove active class from all preset buttons
            document.querySelectorAll('.preset-btn').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            const customSettings = document.getElementById('customSettings');
            if (preset === 'custom') {
                customSettings.style.display = 'block';
            } else {
                customSettings.style.display = 'none';
            }
        }

    
        function updateRtmpUrl() {
            const preset = document.getElementById('rtmpPreset').value;
            const rtmpUrlInput = document.getElementById('rtmpUrl');
            if (preset && preset !== 'custom') {
                rtmpUrlInput.value = preset;
                rtmpUrlInput.readOnly = true;
            } else if (preset === 'custom') {
                rtmpUrlInput.value = '';
                rtmpUrlInput.readOnly = false;
                rtmpUrlInput.focus();
            } else {
                rtmpUrlInput.value = '';
                rtmpUrlInput.readOnly = false;
            }
        }

        function toggleStreamKey() {
            const input = document.getElementById('streamKey');
            const icon = document.getElementById('streamKeyToggle');
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        function showAlert(message, type = 'success') {
            let alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.innerHTML = `<i class="fas fa-info-circle"></i> ${message}`;
            document.querySelector('.container').prepend(alert);
            setTimeout(() => alert.remove(), 3500);
        }

        // File Upload Logic
        const fileInput = document.getElementById('fileInput');
        const uploadArea = document.getElementById('uploadArea');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            handleFiles(e.dataTransfer.files);
        });
        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function handleFiles(files) {
            if (!files.length) return;
            uploadProgress.style.display = 'block';
            progressBar.style.width = '0%';
            progressText.textContent = 'Uploading...';

            // Dummy upload simulation
            let uploaded = 0;
            const total = files.length;
            function simulateUpload() {
                uploaded++;
                progressBar.style.width = `${(uploaded / total) * 100}%`;
                if (uploaded < total) {
                    setTimeout(simulateUpload, 400);
                } else {
                    progressText.textContent = 'Upload Complete!';
                    setTimeout(() => uploadProgress.style.display = 'none', 1000);
                    showAlert('Files uploaded successfully!', 'success');
                    // TODO: Add files to the list dynamically
                }
            }
            simulateUpload();
        }

        // Playlist File Controls (Dummy)
        function moveFile(btn, dir) {
            showAlert(`Move file ${dir} (UI only, needs backend)`, 'success');
        }
        function deleteFile(btn, filename) {
            showAlert(`Deleted file: ${filename} (UI only, needs backend)`, 'success');
            btn.closest('.file-item').remove();
        }
        function sortFiles(criteria) {
            showAlert('Sorted playlist (UI only, needs backend)', 'success');
        }
        function shufflePlaylist() {
            showAlert('Shuffled playlist (UI only, needs backend)', 'success');
        }

        // Stream Control Buttons (Dummy)
        function startStream() {
            updateStreamStatus('demo-stream', 'streaming', 'Stream started!');
        }
        function restartStream() {
            updateStreamStatus('demo-stream', 'streaming', 'Stream restarted!');
        }
        function stopStream() {
            updateStreamStatus('demo-stream', 'stopped', 'Stream stopped.');
        }
    </script>
</body>
</html>