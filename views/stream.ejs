<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stream: <%= streamId %> - Professional Live Streaming Server</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6366f1;
            --primary-dark: #4f46e5;
            --secondary-color: #8b5cf6;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --dark-bg: #0f172a;
            --dark-surface: #1e293b;
            --dark-surface-2: #334155;
            --light-text: #f8fafc;
            --muted-text: #94a3b8;
            --border-color: #334155;
            --gradient-1: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-2: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-3: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--dark-bg);
            color: var(--light-text);
            line-height: 1.6;
            min-height: 100vh;
            background-image:
                radial-gradient(circle at 25% 25%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(139, 92, 246, 0.1) 0%, transparent 50%);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        .card {
            background: rgba(30, 41, 59, 0.8);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border-color);
            border-radius: 1rem;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-lg);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-xl);
            border-color: rgba(99, 102, 241, 0.3);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--light-text);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: var(--gradient-1);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success-color), #059669);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--warning-color), #d97706);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--error-color), #dc2626);
            color: white;
        }

        .btn-ghost {
            background: transparent;
            color: var(--muted-text);
            border: 1px solid var(--border-color);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--light-text);
            font-size: 0.875rem;
        }

        .form-control {
            width: 100%;
            padding: 0.875rem 1rem;
            background: rgba(51, 65, 85, 0.5);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            color: var(--light-text);
            font-size: 0.875rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            background: rgba(51, 65, 85, 0.8);
        }

        .select-control {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }

        .grid {
            display: grid;
            gap: 1.5rem;
        }

        .grid-2 {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .grid-3 {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }

        .status {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .status-streaming {
            background: rgba(16, 185, 129, 0.2);
            color: var(--success-color);
            border: 1px solid rgba(16, 185, 129, 0.3);
            animation: pulse 2s infinite;
        }

        .status-stopped {
            background: rgba(148, 163, 184, 0.2);
            color: var(--muted-text);
            border: 1px solid rgba(148, 163, 184, 0.3);
        }

        .status-error {
            background: rgba(239, 68, 68, 0.2);
            color: var(--error-color);
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .status-created {
            background: rgba(99, 102, 241, 0.2);
            color: var(--primary-color);
            border: 1px solid rgba(99, 102, 241, 0.3);
        }

        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 1rem;
            padding: 3rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            background: rgba(51, 65, 85, 0.2);
        }

        .upload-area:hover {
            border-color: var(--primary-color);
            background: rgba(99, 102, 241, 0.1);
        }

        .upload-area.dragover {
            border-color: var(--success-color);
            background: rgba(16, 185, 129, 0.1);
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: rgba(51, 65, 85, 0.3);
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .file-item:hover {
            background: rgba(51, 65, 85, 0.5);
            transform: translateX(4px);
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .controls {
            display: flex;
            gap: 0.75rem;
            margin-top: 1.5rem;
            flex-wrap: wrap;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background: rgba(51, 65, 85, 0.3);
            padding: 1rem;
            border-radius: 0.5rem;
            text-align: center;
            border: 1px solid var(--border-color);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
        }

        .stat-label {
            font-size: 0.75rem;
            color: var(--muted-text);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .preset-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background: rgba(51, 65, 85, 0.3);
            color: var(--light-text);
            border-radius: 0.375rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }

        .preset-btn.active {
            background: var(--primary-color);
            border-color: var(--primary-color);
        }

        .preset-btn:hover {
            background: rgba(99, 102, 241, 0.2);
            border-color: var(--primary-color);
        }

        .alert {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            backdrop-filter: blur(10px);
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            color: var(--success-color);
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: var(--error-color);
        }

        @keyframes pulse {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .card {
                padding: 1.5rem;
            }

            .controls {
                flex-direction: column;
            }

            .btn {
                justify-content: center;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div style="margin-bottom: 2rem;">
            <a href="/" class="btn btn-ghost">
                <i class="fas fa-arrow-left"></i>
                Back to Dashboard
            </a>
        </div>

        <div class="card">
            <div class="card-header">
                <div>
                    <h2 class="card-title">
                        <i class="fas fa-video"></i>
                        Stream: <%= streamId %>
                    </h2>
                    <p style="color: var(--muted-text); margin-top: 0.5rem;">
                        Configure your live streaming settings and manage your content
                    </p>
                </div>
                <span class="status status-<%= stream.status %>" data-stream-id="<%= streamId %>">
                    <%= stream.status %>
                </span>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="fileCount"><%= stream.stats.fileCount || 0 %></div>
                    <div class="stat-label">Media Files</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="totalSize"><%= stream.stats.totalSize || '0 B' %></div>
                    <div class="stat-label">Total Size</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="duration"><%= stream.stats.duration || '--:--' %></div>
                    <div class="stat-label">Stream Duration</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="viewers"><%= stream.stats.viewers || 0 %></div>
                    <div class="stat-label">Viewers</div>
                </div>
            </div>
        </div>

        <div class="grid grid-2">
            <!-- Stream Configuration -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-sliders-h"></i>
                        Stream Configuration
                    </h3>
                </div>

                <div class="form-group">
                    <label class="form-label">Stream Type</label>
                    <select id="streamType" class="form-control select-control" onchange="toggleStreamOptions()">
                        <option value="video" <%= stream.settings.streamType === 'video' ? 'selected' : '' %>>Video + Audio</option>
                        <option value="audio" <%= stream.settings.streamType === 'audio' ? 'selected' : '' %>>Audio Only</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Quality Preset</label>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 0.5rem;">
                        <% const presets = ['720p', '1080p', '480p', 'custom']; %>
                        <% presets.forEach(preset => { %>
                            <button class="preset-btn <%= stream.settings.preset === preset ? 'active' : '' %>" 
                                    onclick="selectPreset(this, '<%= preset %>')">
                                <%= preset === 'custom' ? 'Custom' : preset.toUpperCase() %>
                                <%= preset !== 'custom' ? (preset === '720p' ? ' HD' : preset === '1080p' ? ' FHD' : ' SD') : '' %>
                            </button>
                        <% }); %>
                    </div>
                </div>

                <div id="customSettings" <%= `style="display: ${stream.settings.preset === 'custom' ? 'block' : 'none'};"` %> >
                    <div class="form-group">
                        <label class="form-label">Resolution</label>
                        <select class="form-control select-control">
                            <% const resolutions = ['1920x1080', '1280x720', '854x480', '640x360']; %>
                            <% resolutions.forEach(resolution => { %>
                                <option value="<%= resolution %>" <%= stream.settings.resolution === resolution ? 'selected' : '' %>>
                                    <%= resolution %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Bitrate (kbps)</label>
                        <input type="number" class="form-control" value="<%= stream.settings.bitrate || 2500 %>" min="500" max="8000">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Frame Rate</label>
                        <select class="form-control select-control">
                            <% const frameRates = [24, 30, 60]; %>
                            <% frameRates.forEach(rate => { %>
                                <option value="<%= rate %>" <%= stream.settings.frameRate === rate ? 'selected' : '' %>>
                                    <%= rate %>
                                </option>
                            <% }); %>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">RTMP Server URL</label>
                    <select id="rtmpPreset" class="form-control select-control" onchange="updateRtmpUrl()">
                        <option value="">Select Platform</option>
                        <% const platforms = [
                            { value: 'rtmp://a.rtmp.youtube.com/live2', name: 'YouTube Live' },
                            { value: 'rtmp://live.twitch.tv/live', name: 'Twitch' },
                            { value: 'rtmp://live-api-s.facebook.com:80/rtmp', name: 'Facebook Live' },
                            { value: 'custom', name: 'Custom RTMP URL' }
                        ]; %>
                        <% platforms.forEach(platform => { %>
                            <option value="<%= platform.value %>" <%= stream.settings.rtmpUrl === platform.value ? 'selected' : '' %>>
                                <%= platform.name %>
                            </option>
                        <% }); %>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">RTMP URL</label>
                    <input type="text" id="rtmpUrl" class="form-control" 
                           placeholder="rtmp://a.rtmp.youtube.com/live2"
                           value="<%= stream.settings.rtmpUrl || 'rtmp://a.rtmp.youtube.com/live2' %>">
                </div>

                <div class="form-group">
                    <label class="form-label">Stream Key</label>
                    <div style="position: relative;">
                        <input type="password" id="streamKey" class="form-control" 
                               placeholder="Your stream key" value="<%= stream.settings.streamKey || '' %>"
                               style="padding-right: 3rem;">
                        <button type="button" onclick="toggleStreamKey()"
                                style="position: absolute; right: 0.75rem; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--muted-text); cursor: pointer;">
                            <i class="fas fa-eye" id="streamKeyToggle"></i>
                        </button>
                    </div>
                </div>

                <div class="controls">
                    <% if (stream.status === 'streaming') { %>
                        <button class="btn btn-warning" onclick="restartStream()">
                            <i class="fas fa-redo"></i> Restart
                        </button>
                        <button class="btn btn-danger" onclick="stopStream()">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                    <% } else { %>
                        <button class="btn btn-success" onclick="startStream()">
                            <i class="fas fa-play"></i> Start Stream
                        </button>
                        <% if (stream.status === 'stopped' && stream.files.length > 0) { %>
                            <button class="btn btn-warning" onclick="restartStream()">
                                <i class="fas fa-redo"></i> Restart
                            </button>
                        <% } %>
                    <% } %>
                </div>
            </div>

            <!-- File Upload -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-upload"></i>
                        Upload Media Files
                    </h3>
                </div>

                <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                    <i class="fas fa-cloud-upload-alt"
                        style="font-size: 3rem; color: var(--muted-text); margin-bottom: 1rem;"></i>
                    <div>
                        <input type="file" id="fileInput" multiple accept="video/*,audio/*" style="display: none;">
                        <div class="btn btn-primary" style="margin-bottom: 1rem;">
                            <i class="fas fa-folder-open"></i> Choose Files
                        </div>
                    </div>
                    <p style="color: var(--muted-text); font-size: 0.875rem;">
                        Or drag and drop files here<br>
                        <small>Supported: MP4, MP3, WAV, AVI, MOV, WMV, FLV, WebM, M4A, AAC</small>
                    </p>
                </div>

                <div id="uploadProgress" style="display: none; margin-top: 1rem;">
                    <div style="background: rgba(51, 65, 85, 0.5); border-radius: 0.5rem; overflow: hidden;">
                        <div id="progressBar"
                            style="height: 0.5rem; background: var(--gradient-1); width: 0%; transition: width 0.3s ease;">
                        </div>
                    </div>
                    <p style="text-align: center; margin-top: 0.5rem; font-size: 0.875rem; color: var(--muted-text);">
                        <span id="progressText">Uploading...</span>
                    </p>
                </div>
            </div>
        </div>

        <!-- Media Files List -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-list"></i>
                    Media Playlist
                </h3>
                <div style="display: flex; gap: 0.5rem;">
                    <button class="btn btn-ghost" onclick="sortFiles('name')">
                        <i class="fas fa-sort-alpha-down"></i> Sort
                    </button>
                    <button class="btn btn-ghost" onclick="shufflePlaylist()">
                        <i class="fas fa-random"></i> Shuffle
                    </button>
                </div>
            </div>

            <div id="filesList">
                <% if (stream.files && stream.files.length > 0) { %>
                    <% stream.files.forEach((file, index) => { %>
                        <div class="file-item" data-filename="<%= file.filename %>" data-index="<%= index %>">
                            <div class="file-info">
                                <i class="<%= file.type && file.type.startsWith('video/') ? 'fas fa-video' : 'fas fa-music' %>" 
                                    <%= `style="color: ${file.type && file.type.startsWith('video/') ? 'var(--primary-color)' : 'var(--accent-color)'};"` %> ></i>
                                <div>
                                    <div style="font-weight: 600;"><%= file.filename %></div>
                                    <div style="font-size: 0.75rem; color: var(--muted-text);">
                                        <%= file.sizeFormatted || 'Unknown size' %> • 
                                        <%= file.resolution || file.bitrate || 'Unknown quality' %> • 
                                        <%= file.duration || 'Unknown duration' %>
                                    </div>
                                </div>
                            </div>
                            <div style="display: flex; gap: 0.5rem; align-items: center;">
                                <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile('<%= index %>', 'up')">
                                    <i class="fas fa-arrow-up"></i>
                                </button>
                                <button class="btn btn-ghost" style="padding: 0.5rem;" onclick="moveFile('<%= index %>', 'down')">
                                    <i class="fas fa-arrow-down"></i>
                                </button>
                                <button class="btn btn-danger" style="padding: 0.5rem;" onclick="deleteFile('<%= file.filename %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div style="text-align: center; padding: 2rem; color: var(--muted-text);">
                        <i class="fas fa-music" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                        <p>No media files uploaded yet.</p>
                        <p>Upload some files to get started!</p>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Stream Analytics -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-chart-line"></i>
                    Stream Analytics
                </h3>
            </div>

            <div class="grid grid-3">
                <% const analytics = [
                    { label: 'Uptime', value: stream.analytics.uptime || '0%', color: 'var(--success-color)' },
                    { label: 'Avg Bitrate', value: stream.analytics.avgBitrate || '0 Mbps', color: 'var(--warning-color)' },
                    { label: 'Frame Rate', value: stream.analytics.frameRate || '0 fps', color: 'var(--accent-color)' },
                    { label: 'Latency', value: stream.analytics.latency || '0ms', color: null },
                    { label: 'Dropped Frames', value: stream.analytics.droppedFrames || '0', color: null },
                    { label: 'Data Sent', value: stream.analytics.dataSent || '0 B', color: null }
                ]; %>
                
                <% analytics.forEach(stat => { %>
                    <div class="stat-card">
                        <div class="stat-value" <% if (stat.color) { %>style="color: <%= stat.color %>;"<% } %>>
                            <%= stat.value %>
                        </div>
                        <div class="stat-label"><%= stat.label %></div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
<script>
    const socket = io();
    let currentStatus = 'stopped';
    let streamData = {
        streamId: '<%= streamId %>',
        files: [],
        stats: {
            fileCount: 0,
            totalSize: 0,
            duration: 0,
            viewers: 0,
            uptime: 0,
            avgBitrate: 0,
            frameRate: 0,
            latency: 0,
            droppedFrames: 0,
            dataSent: 0
        }
    };
    console.log(streamData.files)

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function () {
        // Check for URL parameters (success/error messages)
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('success')) {
            showAlert(urlParams.get('success'), 'success');
            // Clean URL without refreshing
            window.history.replaceState({}, document.title, window.location.pathname);
        }
        if (urlParams.get('error')) {
            showAlert(urlParams.get('error'), 'error');
            // Clean URL without refreshing
            window.history.replaceState({}, document.title, window.location.pathname);
        }

        loadStreamData();
        updateUI();
    });

    // Socket event listeners
    socket.on('streamStatus', (data) => {
        updateStreamStatus(data.streamId, data.status, data.message);
    });

    socket.on('streamStats', (data) => {
        updateStreamStats(data);
    });

    socket.on('fileUploaded', (data) => {
        addFileToPlaylist(data);
        updateStreamStats();
    });

    socket.on('fileDeleted', (data) => {
        removeFileFromPlaylist(data.filename);
        updateStreamStats();
    });

    // Load initial stream data
    async function loadStreamData() {
        try {
            const response = await fetch(`/api/streams/${streamData.streamId}`);
            const data = await response.json();
            if (data.success) {
                streamData = { ...streamData, ...data.stream };
                updateUI();
            }
        } catch (error) {
            console.error('Failed to load stream data:', error);
            showAlert('Failed to load stream data', 'error');
        }
    }

    function updateStreamStatus(streamId, status, message) {
        const statusElement = document.querySelector(`[data-stream-id="${streamId}"]`);
        if (statusElement) {
            statusElement.className = `status status-${status}`;
            statusElement.textContent = status;
            currentStatus = status;
        }

        if (message) {
            showAlert(message, status === 'error' ? 'error' : 'success');
        }
    }

    function updateStreamStats(data = null) {
        if (data) {
            streamData.stats = { ...streamData.stats, ...data };
        }

        // Update file stats
        streamData.stats.fileCount = streamData.files.length;
        streamData.stats.totalSize = streamData.files.reduce((total, file) => total + (file.size || 0), 0);

        // Update UI elements
        document.getElementById('fileCount').textContent = streamData.stats.fileCount;
        document.getElementById('totalSize').textContent = formatFileSize(streamData.stats.totalSize);
        document.getElementById('duration').textContent = formatDuration(streamData.stats.duration);
        document.getElementById('viewers').textContent = streamData.stats.viewers;

        // Update analytics
        const analyticsElements = {
            uptime: document.querySelector('.stat-card .stat-value[style*="success-color"]'),
            avgBitrate: document.querySelector('.stat-card .stat-value[style*="warning-color"]'),
            frameRate: document.querySelector('.stat-card .stat-value[style*="accent-color"]'),
            latency: document.querySelectorAll('.stat-card .stat-value')[3],
            droppedFrames: document.querySelectorAll('.stat-card .stat-value')[4],
            dataSent: document.querySelectorAll('.stat-card .stat-value')[5]
        };

        if (analyticsElements.uptime) analyticsElements.uptime.textContent = `${streamData.stats.uptime.toFixed(1)}%`;
        if (analyticsElements.avgBitrate) analyticsElements.avgBitrate.textContent = `${streamData.stats.avgBitrate.toFixed(1)} Mbps`;
        if (analyticsElements.frameRate) analyticsElements.frameRate.textContent = `${streamData.stats.frameRate} fps`;
        if (analyticsElements.latency) analyticsElements.latency.textContent = `${streamData.stats.latency}ms`;
        if (analyticsElements.droppedFrames) analyticsElements.droppedFrames.textContent = streamData.stats.droppedFrames;
        if (analyticsElements.dataSent) analyticsElements.dataSent.textContent = formatFileSize(streamData.stats.dataSent);
    }

    function formatDuration(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }

    function toggleStreamOptions() {
        const streamType = document.getElementById('streamType').value;
        // Show/hide video-specific options based on stream type
        const videoOptions = document.querySelectorAll('.video-only-option');
        videoOptions.forEach(option => {
            option.style.display = streamType === 'audio' ? 'none' : 'block';
        });
    }

    function selectPreset(button, preset) {
        document.querySelectorAll('.preset-btn').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        const customSettings = document.getElementById('customSettings');
        if (preset === 'custom') {
            customSettings.style.display = 'block';
        } else {
            customSettings.style.display = 'none';
            applyPresetSettings(preset);
        }
    }

    function applyPresetSettings(preset) {
        const settings = {
            '720p': { resolution: '1280x720', bitrate: 2500, frameRate: 30 },
            '1080p': { resolution: '1920x1080', bitrate: 4500, frameRate: 30 },
            '480p': { resolution: '854x480', bitrate: 1200, frameRate: 30 }
        };

        if (settings[preset]) {
            const resolutionSelect = document.querySelector('#customSettings select');
            const bitrateInput = document.querySelector('#customSettings input[type="number"]');
            const frameRateSelect = document.querySelector('#customSettings select:last-child');

            if (resolutionSelect) resolutionSelect.value = settings[preset].resolution;
            if (bitrateInput) bitrateInput.value = settings[preset].bitrate;
            if (frameRateSelect) frameRateSelect.value = settings[preset].frameRate;
        }
    }

    function updateRtmpUrl() {
        const preset = document.getElementById('rtmpPreset').value;
        const rtmpUrlInput = document.getElementById('rtmpUrl');

        if (preset && preset !== 'custom') {
            rtmpUrlInput.value = preset;
            rtmpUrlInput.readOnly = true;
        } else if (preset === 'custom') {
            rtmpUrlInput.value = '';
            rtmpUrlInput.readOnly = false;
            rtmpUrlInput.focus();
        } else {
            rtmpUrlInput.value = '';
            rtmpUrlInput.readOnly = false;
        }
    }

    function toggleStreamKey() {
        const input = document.getElementById('streamKey');
        const icon = document.getElementById('streamKeyToggle');

        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    }

    function showAlert(message, type = 'success') {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.innerHTML = `<i class="fas fa-${type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i> ${message}`;

        document.querySelector('.container').prepend(alert);
        setTimeout(() => alert.remove(), 5000);
    }

    // File Upload Logic - Updated for dynamic streamId
    const fileInput = document.getElementById('fileInput');
    const uploadArea = document.getElementById('uploadArea');
    const uploadProgress = document.getElementById('uploadProgress');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        handleFiles(e.dataTransfer.files);
    });

    fileInput.addEventListener('change', (e) => {
        handleFiles(e.target.files);
    });

    async function handleFiles(files) {
        if (!files.length) return;

        const formData = new FormData();
        Array.from(files).forEach((file) => {
            formData.append('files', file);
        });

        uploadProgress.style.display = 'block';
        progressBar.style.width = '0%';
        progressText.textContent = 'Uploading...';

        try {
            const xhr = new XMLHttpRequest();

            xhr.upload.addEventListener('progress', (e) => {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    progressBar.style.width = `${percentComplete}%`;
                    progressText.textContent = `Uploading... ${Math.round(percentComplete)}%`;
                }
            });

            xhr.addEventListener('load', () => {
                if (xhr.status === 200) {
                    progressText.textContent = 'Upload Complete!';
                    showAlert('Files uploaded successfully!', 'success');
                    
                    // Reload the page to show updated file list
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    throw new Error('Upload failed');
                }
            });

            xhr.addEventListener('error', () => {
                showAlert('Upload failed. Please try again.', 'error');
                uploadProgress.style.display = 'none';
            });

            xhr.open('POST', `/upload/${streamData.streamId}`);
            xhr.send(formData);

        } catch (error) {
            console.error('Upload error:', error);
            showAlert('Upload failed. Please try again.', 'error');
            uploadProgress.style.display = 'none';
        }
    }

    // Playlist Management
    function renderFilesList() {
        const filesList = document.getElementById('filesList');
        
        // If no files, show empty state
        if (!streamData.files || streamData.files.length === 0) {
            filesList.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: var(--muted-text);">
                    <i class="fas fa-folder-open" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                    <p>No media files uploaded yet.</p>
                    <p style="font-size: 0.875rem;">Upload some files to get started!</p>
                </div>
            `;
            return;
        }

        filesList.innerHTML = '';
        streamData.files.forEach((file, index) => {
            const fileItem = createFileItem(file, index);
            filesList.appendChild(fileItem);
        });
    }

    function createFileItem(file, index) {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.dataset.filename = file.filename;
        fileItem.dataset.index = index;

        const fileIcon = file.type?.startsWith('video/') ? 'fas fa-video' : 'fas fa-music';
        const iconColor = file.type?.startsWith('video/') ? 'var(--primary-color)' : 'var(--accent-color)';

        fileItem.innerHTML = `
            
        `;

        return fileItem;
    }

    function addFileToPlaylist(file) {
        streamData.files.push(file);
        renderFilesList();
    }

    function removeFileFromPlaylist(filename) {
        streamData.files = streamData.files.filter(file => file.filename !== filename);
        renderFilesList();
    }

    async function moveFile(index, direction) {
        if (direction === 'up' && index > 0) {
            [streamData.files[index], streamData.files[index - 1]] = [streamData.files[index - 1], streamData.files[index]];
        } else if (direction === 'down' && index < streamData.files.length - 1) {
            [streamData.files[index], streamData.files[index + 1]] = [streamData.files[index + 1], streamData.files[index]];
        } else {
            return;
        }

        try {
            const response = await fetch('/api/playlist/reorder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    streamId: streamData.streamId,
                    files: streamData.files.map(f => f.filename)
                })
            });

            if (response.ok) {
                renderFilesList();
                showAlert('Playlist reordered successfully', 'success');
            } else {
                throw new Error('Failed to reorder playlist');
            }
        } catch (error) {
            console.error('Move file error:', error);
            showAlert('Failed to reorder playlist', 'error');
            // Revert the change on error
            loadStreamData();
        }
    }

    async function deleteFile(filename) {
        if (!confirm(`Are you sure you want to delete "${filename}"?`)) return;

        try {
            const response = await fetch('/api/files/delete', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    streamId: streamData.streamId,
                    filename: filename
                })
            });

            if (response.ok) {
                removeFileFromPlaylist(filename);
                updateStreamStats();
                showAlert(`Deleted file: ${filename}`, 'success');
            } else {
                throw new Error('Failed to delete file');
            }
        } catch (error) {
            console.error('Delete file error:', error);
            showAlert('Failed to delete file', 'error');
        }
    }

    async function sortFiles(criteria) {
        if (!streamData.files || streamData.files.length === 0) {
            showAlert('No files to sort', 'error');
            return;
        }

        streamData.files.sort((a, b) => {
            switch (criteria) {
                case 'name':
                    return a.filename.localeCompare(b.filename);
                case 'size':
                    return (b.size || 0) - (a.size || 0);
                case 'date':
                    return new Date(b.uploadDate || 0) - new Date(a.uploadDate || 0);
                default:
                    return 0;
            }
        });

        try {
            const response = await fetch('/api/playlist/reorder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    streamId: streamData.streamId,
                    files: streamData.files.map(f => f.filename)
                })
            });

            if (response.ok) {
                renderFilesList();
                showAlert(`Sorted playlist by ${criteria}`, 'success');
            }
        } catch (error) {
            console.error('Sort error:', error);
            showAlert('Failed to sort playlist', 'error');
        }
    }

    async function shufflePlaylist() {
        if (!streamData.files || streamData.files.length === 0) {
            showAlert('No files to shuffle', 'error');
            return;
        }

        for (let i = streamData.files.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [streamData.files[i], streamData.files[j]] = [streamData.files[j], streamData.files[i]];
        }

        try {
            const response = await fetch('/api/playlist/reorder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    streamId: streamData.streamId,
                    files: streamData.files.map(f => f.filename)
                })
            });

            if (response.ok) {
                renderFilesList();
                showAlert('Playlist shuffled successfully', 'success');
            }
        } catch (error) {
            console.error('Shuffle error:', error);
            showAlert('Failed to shuffle playlist', 'error');
        }
    }

    // Stream Control Functions
    async function startStream() {
        const rtmpUrl = document.getElementById('rtmpUrl').value;
        const streamKey = document.getElementById('streamKey').value;
        const streamType = document.getElementById('streamType').value;

        if (!rtmpUrl || !streamKey) {
            showAlert('Please provide RTMP URL and Stream Key', 'error');
            return;
        }

        if (!streamData.files || streamData.files.length === 0) {
            showAlert('Please upload at least one media file before starting the stream', 'error');
            return;
        }

        try {
            const response = await fetch('/start-stream', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    streamId: streamData.streamId,
                    rtmpUrl: rtmpUrl,
                    streamKey: streamKey,
                    streamType: streamType,
                    settings: getStreamSettings()
                })
            });

            const result = await response.json();
            if (result.success) {
                updateStreamStatus(streamData.streamId, 'streaming', 'Stream started successfully!');
            } else {
                throw new Error(result.message || 'Failed to start stream');
            }
        } catch (error) {
            console.error('Start stream error:', error);
            showAlert('Failed to start stream: ' + error.message, 'error');
        }
    }

    async function restartStream() {
        if (currentStatus !== 'streaming') {
            showAlert('Stream is not currently running', 'error');
            return;
        }

        try {
            const response = await fetch('/api/stream/restart', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ streamId: streamData.streamId })
            });

            const result = await response.json();
            if (result.success) {
                updateStreamStatus(streamData.streamId, 'streaming', 'Stream restarted successfully!');
            } else {
                throw new Error(result.message || 'Failed to restart stream');
            }
        } catch (error) {
            console.error('Restart stream error:', error);
            showAlert('Failed to restart stream: ' + error.message, 'error');
        }
    }

    async function stopStream() {
        if (currentStatus === 'stopped') {
            showAlert('Stream is already stopped', 'error');
            return;
        }

        try {
            const response = await fetch('/api/stream/stop', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ streamId: streamData.streamId })
            });

            const result = await response.json();
            if (result.success) {
                updateStreamStatus(streamData.streamId, 'stopped', 'Stream stopped successfully.');
            } else {
                throw new Error(result.message || 'Failed to stop stream');
            }
        } catch (error) {
            console.error('Stop stream error:', error);
            showAlert('Failed to stop stream: ' + error.message, 'error');
        }
    }

    function getStreamSettings() {
        const activePreset = document.querySelector('.preset-btn.active');
        const preset = activePreset ? activePreset.textContent.trim() : 'custom';

        if (preset === 'Custom') {
            const customSettings = document.getElementById('customSettings');
            if (customSettings.style.display !== 'none') {
                return {
                    resolution: document.querySelector('#customSettings select').value,
                    bitrate: parseInt(document.querySelector('#customSettings input[type="number"]').value),
                    frameRate: parseInt(document.querySelector('#customSettings select:last-child').value)
                };
            }
        }

        return { preset: preset.toLowerCase().replace(' hd', '').replace(' fhd', '').replace(' sd', '') };
    }

    function updateUI() {
        renderFilesList();
        updateStreamStats();
        
        // Update stream title with actual streamId
        const streamTitle = document.querySelector('.card-title');
        if (streamTitle) {
            streamTitle.innerHTML = `<i class="fas fa-video"></i> Stream: ${streamData.streamId}`;
        }
    }

    // Auto-refresh stream stats every 5 seconds when streaming
    setInterval(() => {
        if (currentStatus === 'streaming') {
            loadStreamData();
        }
    }, 5000);

    // Handle page unload - warn if stream is running
    window.addEventListener('beforeunload', (e) => {
        if (currentStatus === 'streaming') {
            e.preventDefault();
            e.returnValue = 'Stream is currently running. Are you sure you want to leave?';
        }
    });
</script>
</body>

</html>