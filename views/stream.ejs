<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #3b82f6;
            --secondary-color: #1e40af;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-bg: #0f172a;
            --card-bg: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --muted-text: #64748b;
            --border-color: #334155;
            --gradient-1: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-2: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .card {
            background: var(--card-bg);
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status {
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-created {
            background: var(--muted-text);
            color: white;
        }

        .status-streaming {
            background: var(--success-color);
            color: white;
        }

        .status-stopped {
            background: var(--warning-color);
            color: white;
        }

        .status-error {
            background: var(--danger-color);
            color: white;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 0.75rem;
            padding: 1.5rem;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .grid {
            display: grid;
            gap: 2rem;
        }

        .grid-2 {
            grid-template-columns: 1fr 1fr;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--text-secondary);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            background: rgba(15, 23, 42, 0.8);
            color: var(--text-primary);
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-weight: 600;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }

        .btn-primary {
            background: var(--gradient-1);
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-warning {
            background: var(--warning-color);
            color: white;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn-ghost {
            background: transparent;
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .controls {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 0.75rem;
            padding: 3rem 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(59, 130, 246, 0.05);
        }

        .upload-area:hover,
        .upload-area.dragover {
            border-color: var(--primary-color);
            background: rgba(59, 130, 246, 0.1);
        }

        .file-section {
            margin-bottom: 2rem;
        }

        .file-section-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
            padding: 0.75rem;
            background: rgba(59, 130, 246, 0.1);
            border-radius: 0.5rem;
            border-left: 4px solid var(--primary-color);
        }

        .file-section-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .file-count {
            background: var(--primary-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background: rgba(30, 41, 59, 0.8);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            margin-bottom: 0.75rem;
            transition: all 0.3s ease;
        }

        .file-item:hover {
            background: rgba(30, 41, 59, 1);
            transform: translateX(4px);
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex: 1;
        }

        .file-icon {
            font-size: 1.5rem;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem;
        }

        .file-icon.video {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        .file-icon.audio {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .file-details {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .file-meta {
            font-size: 0.75rem;
            color: var(--muted-text);
        }

        .file-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: var(--muted-text);
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        .alert {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.2);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10b981;
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.2);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
        }

        @media (max-width: 768px) {
            .grid-2 {
                grid-template-columns: 1fr;
            }

            .container {
                padding: 1rem;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .controls {
                justify-content: center;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div style="margin-bottom: 2rem;">
            <a href="/" class="btn btn-ghost">
                <i class="fas fa-arrow-left"></i>
                Back to Dashboard
            </a>
        </div>

        <div class="card">
            <div class="card-header">
                <div>
                    <h2 class="card-title">
                        <i class="fas fa-video"></i>
                        Stream: <%= streamId %>
                    </h2>
                    <p style="color: var(--muted-text); margin-top: 0.5rem;">
                        Upload media files and start streaming
                    </p>
                </div>
                <span class="status status-<%= status %>" data-stream-id="<%= streamId %>">
                    <%= status %>
                </span>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="videoCount">
                        <%= files.video.length %>
                    </div>
                    <div class="stat-label">Video Files</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="audioCount">
                        <%= files.audio.length %>
                    </div>
                    <div class="stat-label">Audio Files</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="totalSize">
                        <%= totalSize ? formatFileSize(totalSize) : '0 B' %>
                    </div>
                    <div class="stat-label">Total Size</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="duration">--:--</div>
                    <div class="stat-label">Stream Duration</div>
                </div>
            </div>
        </div>

        <div class="grid grid-2">
            <!-- Stream Configuration -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-sliders-h"></i>
                        Stream Configuration
                    </h3>
                </div>

                <div class="form-group">
                    <label class="form-label">RTMP Server URL</label>
                    <select id="rtmpPreset" class="form-control select-control" onchange="updateRtmpUrl()">
                        <option value="">Select Platform</option>
                        <option value="rtmp://a.rtmp.youtube.com/live2">YouTube Live</option>
                        <option value="rtmp://live.twitch.tv/live">Twitch</option>
                        <option value="rtmp://live-api-s.facebook.com:80/rtmp">Facebook Live</option>
                        <option value="custom">Custom RTMP URL</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">RTMP URL</label>
                    <input type="text" id="rtmpUrl" class="form-control" placeholder="rtmp://a.rtmp.youtube.com/live2"
                        value="rtmp://a.rtmp.youtube.com/live2">
                </div>

                <div class="form-group">
                    <label class="form-label">Stream Key</label>
                    <div style="position: relative;">
                        <input type="password" id="streamKey" class="form-control" placeholder="Your stream key"
                            style="padding-right: 3rem;">
                        <button type="button" onclick="toggleStreamKey()"
                            style="position: absolute; right: 0.75rem; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--muted-text); cursor: pointer;">
                            <i class="fas fa-eye" id="streamKeyToggle"></i>
                        </button>
                    </div>
                </div>

                <div class="controls">
                    <% if (status==='streaming' ) { %>
                        <button class="btn btn-warning" onclick="restartStream()">
                            <i class="fas fa-redo"></i> Restart
                        </button>
                        <button class="btn btn-danger" onclick="stopStream()">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                        <% } else { %>
                            <button class="btn btn-success" onclick="startStream()">
                                <i class="fas fa-play"></i> Start Stream
                            </button>
                            <% if (status==='stopped' && (files.video.length> 0 || files.audio.length > 0)) { %>
                                <button class="btn btn-warning" onclick="restartStream()">
                                    <i class="fas fa-redo"></i> Restart
                                </button>
                                <% } %>
                                    <% } %>
                </div>
            </div>

            <!-- File Upload -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-upload"></i>
                        Upload Media Files
                    </h3>
                </div>

                <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                    <i class="fas fa-cloud-upload-alt"
                        style="font-size: 3rem; color: var(--muted-text); margin-bottom: 1rem;"></i>
                    <div>
                        <input type="file" id="fileInput" multiple accept="video/*,audio/*,image/*"
                            style="display: none;">
                        <div class="btn btn-primary" style="margin-bottom: 1rem;">
                            <i class="fas fa-folder-open"></i> Choose Files
                        </div>
                    </div>
                    <p style="color: var(--muted-text); font-size: 0.875rem;">
                        Or drag and drop files here<br>
                        <small>Supported: MP4, MP3, WAV, AVI, MOV, WMV, FLV, WebM, M4A, AAC, MKV, OGG, 3GP</small>
                    </p>
                </div>

                <div id="uploadProgress" style="display: none; margin-top: 1rem;">
                    <div style="background: rgba(51, 65, 85, 0.5); border-radius: 0.5rem; overflow: hidden;">
                        <div id="progressBar"
                            style="height: 0.5rem; background: var(--gradient-1); width: 0%; transition: width 0.3s ease;">
                        </div>
                    </div>
                    <p style="text-align: center; margin-top: 0.5rem; font-size: 0.875rem; color: var(--muted-text);">
                        <span id="progressText">Uploading...</span>
                    </p>
                </div>
            </div>
        </div>

        <!-- Media Files List -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-list"></i>
                    Media Library
                </h3>
                <div style="display: flex; gap: 0.5rem;">
                    <button class="btn btn-ghost" onclick="sortFiles('name')">
                        <i class="fas fa-sort-alpha-down"></i> Sort
                    </button>
                    <button class="btn btn-ghost" onclick="shufflePlaylist()">
                        <i class="fas fa-random"></i> Shuffle
                    </button>
                </div>
            </div>

            <!-- Video Files Section -->
            <div class="file-section">
                <div class="file-section-header">
                    <i class="fas fa-video" style="color: #ef4444;"></i>
                    <div class="file-section-title">Video Files</div>
                    <div class="file-count">
                        <%= files.video.length %>
                    </div>
                </div>

                <div id="videoFilesList">
                    <% if (files.video && files.video.length> 0) { %>
                        <% files.video.forEach((file, index)=> { %>
                            <div class="file-item" data-filename="<%= file.name %>" data-type="video"
                                data-index="<%= index %>">
                                <div class="file-info">
                                    <div class="file-icon video">
                                        <i class="fas fa-play"></i>
                                    </div>
                                    <div class="file-details">
                                        <div class="file-name">
                                            <%= file.name %>
                                        </div>
                                        <div class="file-meta">
                                            <%= formatFileSize(file.size) %> • Video
                                        </div>
                                    </div>
                                </div>
                                <div class="file-actions">
                                    <button class="btn btn-ghost" style="padding: 0.5rem;"
                                        onclick="moveFile('video', '<%= index %>', 'up')">
                                        <i class="fas fa-arrow-up"></i>
                                    </button>
                                    <button class="btn btn-ghost" style="padding: 0.5rem;"
                                        onclick="moveFile('video', '<%= index %>', 'down')">
                                        <i class="fas fa-arrow-down"></i>
                                    </button>
                                    <button class="btn btn-danger" style="padding: 0.5rem;"
                                        onclick="deleteFile('video', '<%= file.name %>')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <% }); %>
                                <% } else { %>
                                    <div class="empty-state">
                                        <i class="fas fa-video"></i>
                                        <p>No video files uploaded yet.</p>
                                        <p>Upload some video files to get started!</p>
                                    </div>
                                    <% } %>
                </div>
            </div>

            <!-- Audio Files Section -->
            <div class="file-section">
                <div class="file-section-header">
                    <i class="fas fa-music" style="color: #10b981;"></i>
                    <div class="file-section-title">Audio Files</div>
                    <div class="file-count">
                        <%= files.audio.length %>
                    </div>
                </div>

                <div id="audioFilesList">
                    <% if (files.audio && files.audio.length> 0) { %>
                        <% files.audio.forEach((file, index)=> { %>
                            <div class="file-item" data-filename="<%= file.name %>" data-type="audio"
                                data-index="<%= index %>">
                                <div class="file-info">
                                    <div class="file-icon audio">
                                        <i class="fas fa-music"></i>
                                    </div>
                                    <div class="file-details">
                                        <div class="file-name">
                                            <%= file.name %>
                                        </div>
                                        <div class="file-meta">
                                            <%= formatFileSize(file.size) %> • Audio
                                        </div>
                                    </div>
                                </div>
                                <div class="file-actions">
                                    <button class="btn btn-ghost" style="padding: 0.5rem;"
                                        onclick="moveFile('audio', '<%= index %>', 'up')">
                                        <i class="fas fa-arrow-up"></i>
                                    </button>
                                    <button class="btn btn-ghost" style="padding: 0.5rem;"
                                        onclick="moveFile('audio', '<%= index %>', 'down')">
                                        <i class="fas fa-arrow-down"></i>
                                    </button>
                                    <button class="btn btn-danger" style="padding: 0.5rem;"
                                        onclick="deleteFile('audio', '<%= file.name %>')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <% }); %>
                                <% } else { %>
                                    <div class="empty-state">
                                        <i class="fas fa-music"></i>
                                        <p>No audio files uploaded yet.</p>
                                        <p>Upload some audio files to get started!</p>
                                    </div>
                                    <% } %>
                </div>
            </div>
        </div>

        <!-- Stream Progress -->
        <div class="card" id="streamProgressCard" style="display: none;">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-chart-line"></i>
                    Stream Progress
                </h3>
            </div>
            <div class="progress-info">
                <div class="progress-item">
                    <span class="progress-label">Frames:</span>
                    <span id="progressFrames">0</span>
                </div>
                <div class="progress-item">
                    <span class="progress-label">FPS:</span>
                    <span id="progressFps">0</span>
                </div>
                <div class="progress-item">
                    <span class="progress-label">Bitrate:</span>
                    <span id="progressBitrate">0 kbps</span>
                </div>
                <div class="progress-item">
                    <span class="progress-label">Time:</span>
                    <span id="progressTime">00:00:00</span>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <script>
        const streamId = '<%= streamId %>';
        const socket = io();
        let startTime = null;

        // Initialize socket connection
        socket.emit('joinStream', streamId);

        // Handle drag and drop
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, unhighlight, false);
        });

        // Handle dropped files
        uploadArea.addEventListener('drop', handleDrop, false);
        fileInput.addEventListener('change', handleFiles, false);

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function highlight(e) {
            uploadArea.classList.add('highlight');
        }

        function unhighlight(e) {
            uploadArea.classList.remove('highlight');
        }

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles({ target: { files: files } });
        }

        function handleFiles(e) {
            const files = e.target.files;
            if (files.length > 0) {
                uploadFiles(files);
            }
        }

        function uploadFiles(files) {
            const formData = new FormData();
            
            for (let i = 0; i < files.length; i++) {
                formData.append('files', files[i]);
            }

            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            const uploadProgress = document.getElementById('uploadProgress');

            uploadProgress.style.display = 'block';
            
            const xhr = new XMLHttpRequest();
            
            xhr.upload.addEventListener('progress', (e) => {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    progressBar.style.width = percentComplete + '%';
                    progressText.textContent = `Uploading... ${Math.round(percentComplete)}%`;
                }
            });

            xhr.addEventListener('load', () => {
                if (xhr.status === 200) {
                    progressText.textContent = 'Upload complete! Refreshing...';
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    progressText.textContent = 'Upload failed!';
                    setTimeout(() => {
                        uploadProgress.style.display = 'none';
                    }, 2000);
                }
            });

            xhr.addEventListener('error', () => {
                progressText.textContent = 'Upload failed!';
                setTimeout(() => {
                    uploadProgress.style.display = 'none';
                }, 2000);
            });

            xhr.open('POST', `/upload/${streamId}`);
            xhr.send(formData);
        }

        // RTMP URL management
        function updateRtmpUrl() {
            const preset = document.getElementById('rtmpPreset').value;
            const rtmpUrl = document.getElementById('rtmpUrl');
            
            if (preset && preset !== 'custom') {
                rtmpUrl.value = preset;
                rtmpUrl.readOnly = true;
            } else {
                rtmpUrl.readOnly = false;
                if (preset === 'custom') {
                    rtmpUrl.value = '';
                    rtmpUrl.focus();
                }
            }
        }

        // Toggle stream key visibility
        function toggleStreamKey() {
            const streamKeyInput = document.getElementById('streamKey');
            const toggleIcon = document.getElementById('streamKeyToggle');
            
            if (streamKeyInput.type === 'password') {
                streamKeyInput.type = 'text';
                toggleIcon.classList.remove('fa-eye');
                toggleIcon.classList.add('fa-eye-slash');
            } else {
                streamKeyInput.type = 'password';
                toggleIcon.classList.remove('fa-eye-slash');
                toggleIcon.classList.add('fa-eye');
            }
        }

        // Stream control functions
        function startStream() {
            const rtmpUrl = document.getElementById('rtmpUrl').value.trim();
            const streamKey = document.getElementById('streamKey').value.trim();

            if (!rtmpUrl || !streamKey) {
                alert('Please enter both RTMP URL and Stream Key');
                return;
            }

            fetch('/start-stream', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    streamId: streamId,
                    rtmpUrl: rtmpUrl,
                    streamKey: streamKey
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    startTime = new Date();
                    updateStreamDuration();
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Error starting stream: ' + error.message, 'error');
            });
        }

        function stopStream() {
            fetch(`/stop-stream/${streamId}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    startTime = null;
                    document.getElementById('duration').textContent = '--:--';
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Error stopping stream: ' + error.message, 'error');
            });
        }

        function restartStream() {
            const rtmpUrl = document.getElementById('rtmpUrl').value.trim();
            const streamKey = document.getElementById('streamKey').value.trim();

            if (!rtmpUrl || !streamKey) {
                alert('Please enter both RTMP URL and Stream Key');
                return;
            }

            fetch(`/restart-stream/${streamId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    rtmpUrl: rtmpUrl,
                    streamKey: streamKey
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    startTime = new Date();
                    updateStreamDuration();
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Error restarting stream: ' + error.message, 'error');
            });
        }

        // File management functions
        function deleteFile(type, filename) {
            if (!confirm(`Are you sure you want to delete ${filename}?`)) {
                return;
            }

            fetch(`/delete-file/${streamId}/${type}/${encodeURIComponent(filename)}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(data.message, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Error deleting file: ' + error.message, 'error');
            });
        }

        function moveFile(type, index, direction) {
            // This would require additional backend implementation
            showNotification('File reordering feature coming soon!', 'info');
        }

        function sortFiles(sortBy) {
            showNotification('File sorting feature coming soon!', 'info');
        }

        function shufflePlaylist() {
            showNotification('Playlist shuffle feature coming soon!', 'info');
        }

        // Socket event handlers
        socket.on('streamStatus', (data) => {
            if (data.streamId === streamId) {
                updateStreamStatus(data.status);
                if (data.status === 'streaming') {
                    startTime = new Date();
                    updateStreamDuration();
                    document.getElementById('streamProgressCard').style.display = 'block';
                } else if (data.status === 'stopped' || data.status === 'error') {
                    startTime = null;
                    document.getElementById('duration').textContent = '--:--';
                    document.getElementById('streamProgressCard').style.display = 'none';
                }
                
                if (data.message) {
                    showNotification(data.message, data.status === 'error' ? 'error' : 'info');
                }
            }
        });

        socket.on('streamProgress', (data) => {
            if (data.streamId === streamId) {
                updateStreamProgress(data.progress);
            }
        });

        // Update functions
        function updateStreamStatus(status) {
            const statusElement = document.querySelector('.status');
            statusElement.textContent = status;
            statusElement.className = `status status-${status}`;
            
            // Update controls based on status
            const controls = document.querySelector('.controls');
            if (status === 'streaming') {
                controls.innerHTML = `
                    <button class="btn btn-warning" onclick="restartStream()">
                        <i class="fas fa-redo"></i> Restart
                    </button>
                    <button class="btn btn-danger" onclick="stopStream()">
                        <i class="fas fa-stop"></i> Stop
                    </button>
                `;
            } else {
                controls.innerHTML = `
                    <button class="btn btn-success" onclick="startStream()">
                        <i class="fas fa-play"></i> Start Stream
                    </button>
                    ${status === 'stopped' ? `
                        <button class="btn btn-warning" onclick="restartStream()">
                            <i class="fas fa-redo"></i> Restart
                        </button>
                    ` : ''}
                `;
            }
        }

        function updateStreamProgress(progress) {
            document.getElementById('progressFrames').textContent = progress.frames || 0;
            document.getElementById('progressFps').textContent = Math.round(progress.currentFps || 0);
            document.getElementById('progressBitrate').textContent = Math.round(progress.currentKbps || 0) + ' kbps';
            document.getElementById('progressTime').textContent = progress.timemark || '00:00:00';
        }

        function updateStreamDuration() {
            if (!startTime) return;
            
            const now = new Date();
            const diff = now - startTime;
            const hours = Math.floor(diff / 3600000);
            const minutes = Math.floor((diff % 3600000) / 60000);
            const seconds = Math.floor((diff % 60000) / 1000);
            
            const duration = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            document.getElementById('duration').textContent = duration;
        }

        // Notification system
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                <span>${message}</span>
                <button onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            // Add to page
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // Update duration every second if streaming
        setInterval(() => {
            if (startTime) {
                updateStreamDuration();
            }
        }, 1000);

        // Handle page visibility for better performance
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                socket.emit('leaveStream', streamId);
            } else {
                socket.emit('joinStream', streamId);
            }
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            socket.emit('leaveStream', streamId);
        });

        // Show notification for URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const error = urlParams.get('error');
        const success = urlParams.get('success');

        if (error) {
            showNotification(error, 'error');
        }
        if (success) {
            showNotification(success, 'success');
        }
    </script>
</body>

</html>